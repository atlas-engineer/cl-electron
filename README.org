#+TITLE: cl-electron - Electron binding for Common Lisp

* Installation
=cl-electron= depends on Electron, NodeJS, a Common Lisp implementation
(SBCL) and some CL libraries (consult [[file:cl-electron.asd][cl-electron.asd file]]).

** Nix + Quicklisp
Issuing =nix-shell= at the root of the project starts an environment
where all dependencies are available except for the CL libraries.

If you manage CL libraries by yourself, place them in a directory where
ASDF finds them (e.g. =~/common-lisp/=).

If you manage Common Lisp dependencies with Quicklisp:

1. Clone the git repository to =~/common-lisp/quicklisp/local-projects/cl-electron=
2. =sbcl=
3. =(ql:quickload :cl-electron)=

** Guix
Electron can only be fetched from the =nonguix= channel.  Add the
channel by editing the file =~/.config/guix/channels.scm=, according to
the example below.

#+begin_src scheme
(cons* (channel
        (name 'nonguix)
        (url "https://gitlab.com/nonguix/nonguix")
        (introduction
         (make-channel-introduction
          "897c1a470da759236cc11798f4e0a5f7d4d59fbc"
          (openpgp-fingerprint
           "2A39 3FFF 68F4 EF7A 3D29  12AF 6F51 20A0 22FB B2D5"))))
       %default-channels)
#+end_src

Start a REPL will all the dependencies by issuing:

=guix shell -D -f /path/to/guix.scm -- sbcl=.

* Example
In the example below we launch Electron to create a window that handles
on key press events.

#+begin_src lisp
  (asdf:load-system :cl-electron)
  (defvar my-interface (make-instance 'electron:interface
                                      :electron-socket-path (uiop:xdg-runtime-dir "electron.socket")
                                      :lisp-socket-path (uiop:xdg-runtime-dir "lisp.socket")))
  (electron:launch my-interface)
  (electron::register-before-input-event
   (make-instance 'electron:browser-window :interface my-interface)
   (lambda (browser-window input) (print input)))
#+end_src

* Functions
+ [X] (define-ffi-generic ffi-window-make (browser)
+ [X] (define-ffi-generic ffi-window-delete (window)
+ [X] (define-ffi-generic ffi-window-fullscreen (window))
+ [X] (define-ffi-generic ffi-window-unfullscreen (window))
+ [X] (define-ffi-generic ffi-window-maximize (window))
+ [X] (define-ffi-generic ffi-window-unmaximize (window))
+ [X] (define-ffi-generic ffi-window-title (window)
+ [X] (define-ffi-generic ffi-window-active (browser)
+ [X] (define-ffi-generic ffi-window-to-foreground (window)
+ [X] (define-ffi-generic ffi-window-add-panel-buffer (window buffer side)
+ [X] (define-ffi-generic ffi-window-set-buffer (window buffer &key focus)
+ [X] (define-ffi-generic ffi-window-delete-panel-buffer (window buffer)
+ [X] (define-ffi-generic ffi-window-message-buffer-height (window)
+ [X] (define-ffi-generic ffi-buffer-url (buffer)
+ [X] (define-ffi-generic ffi-buffer-title (buffer)
+ [X] (define-ffi-generic ffi-focus-prompt-buffer (window prompt-buffer)
+ [X] (define-ffi-generic ffi-height (object)
+ [X] (define-ffi-generic ffi-width (object)
+ [X] (define-ffi-generic ffi-buffer-make (buffer)
+ [X] (define-ffi-generic ffi-buffer-delete (buffer)
+ [X] (define-ffi-generic ffi-buffer-load (buffer url)
+ [-] (define-ffi-generic ffi-buffer-load-html (buffer html-content
  url)
  + Can use =web-contents-load-file= as a workaround. Will have to
    create temporary files.
+ [-] (define-ffi-generic ffi-buffer-load-alternate-html (buffer
  html-content content-url url)
    + Can use =web-contents-load-file= as a workaround. Will have to
    create temporary files.
+ [ ] (define-ffi-generic ffi-buffer-evaluate-javascript (buffer javascript &optional world-name)
+ [ ] (define-ffi-generic ffi-buffer-evaluate-javascript-async (buffer javascript &optional world-name)
+ [X] (define-ffi-generic ffi-buffer-add-user-style (buffer style)
+ [X] (define-ffi-generic ffi-buffer-remove-user-style (buffer style)
+ [ ] (define-ffi-generic ffi-buffer-add-user-script (buffer user-script)
+ [ ] (define-ffi-generic ffi-buffer-remove-user-script (buffer script)
+ [-] (define-ffi-generic ffi-buffer-javascript-enabled-p (buffer)
  + JavaScript can be disabled, but only at buffer creation time.
  + One will have to keep track of if JavaScript is enabled.
+ [ ] (define-ffi-generic ffi-buffer-javascript-markup-enabled-p (buffer)
+ [-] (define-ffi-generic ffi-buffer-smooth-scrolling-enabled-p
  (buffer)
  + There is not a smooth scrolling option in electron.
+ [-] (define-ffi-generic ffi-buffer-media-enabled-p (buffer)
  + One cannot enable/disable media in electron.
+ [-] (define-ffi-generic ffi-buffer-webgl-enabled-p (buffer)
  + WebGL can be disabled, but only at buffer creation time.
  + One will have to keep track of if WebGL is enabled.
+ [-] (define-ffi-generic ffi-buffer-auto-load-image-enabled-p
  (buffer)
  + Images can be disabled, but only at buffer creation time.
  + One will have to keep track of if images are enabled.
+ [X] (define-ffi-generic ffi-buffer-sound-enabled-p (buffer)
+ [-] (define-ffi-generic ffi-buffer-proxy (buffer)
  + One cannot set the proxy in electron.
+ [X] (define-ffi-generic ffi-buffer-user-agent (buffer)
+ [X] (define-ffi-generic ffi-buffer-download (buffer url)
+ [X] (define-ffi-generic ffi-buffer-zoom-level (buffer)
+ [X] (define-ffi-generic ffi-muted-p (buffer)
+ [-] (define-ffi-generic ffi-buffer-get-document (buffer)
  + There is no way to do this directly, but you can use JavaScript as
    a workaround.
+ [ ] (define-ffi-generic ffi-generate-input-event (window event)
+ [ ] (define-ffi-generic ffi-generated-input-event-p (window event)
+ [ ] (define-ffi-generic ffi-within-renderer-thread (browser thunk)
+ [X] (define-ffi-generic ffi-kill-browser (browser)
+ [X] (define-ffi-generic ffi-initialize (browser urls startup-timestamp)
+ [X] (define-ffi-generic ffi-inspector-show (buffer)
+ [X] (define-ffi-generic ffi-print-status (window text)
+ [X] (define-ffi-generic ffi-print-message (window message)
+ [X] (define-ffi-generic ffi-display-url (browser url)
+ [-] (define-ffi-generic ffi-buffer-cookie-policy (buffer)
  + It is impossible to set the cookie policy in electron.
+ [-] (define-ffi-generic ffi-preferred-languages (buffer)
  + It is impossible to set the preferred languages in electron
    outside of startup.
+ [X] (define-ffi-generic ffi-focused-p (buffer)
+ [-] (define-ffi-generic ffi-tracking-prevention (buffer)
  + There is no tracking prevention in electron.
+ [X] (define-ffi-generic ffi-buffer-copy (buffer &optional text)
+ [X] (define-ffi-generic ffi-buffer-paste (buffer &optional text)
+ [X] (define-ffi-generic ffi-buffer-cut (buffer)
+ [X] (define-ffi-generic ffi-buffer-select-all (buffer)
+ [X] (define-ffi-generic ffi-buffer-undo (buffer)
+ [X] (define-ffi-generic ffi-buffer-redo (buffer)
+ [ ] (define-ffi-generic ffi-add-context-menu-command (command label)

* Copying
cl-electron is distributed under the BSD license.

Please note that this license only covers the binding itself. Refer to
the distribution terms of the third-party dependencies for details.
